# This file is a part of JuliaFEM.
# License is MIT: see https://github.com/JuliaFEM/FEMBeam.jl/blob/master/LICENSE

using FEMBeam
using FEMBase.Test

# ABAQUS code to test:
# *NODE
#  1, 0.0, 0.0, 0.0
#  2, 0.0, 1.0, 0.0
# *ELEMENT, TYPE=B33, ELSET=EALL
#  1, 1,2
# *BEAM GENERAL SECTION, ELSET=EALL, DENSITY=100.0, SECTION=GENERAL
#  2.5E-2, 1.0E-4, 0.0E-4, 1.5E-4, 3.0E-5
#  1.0, 0.0, 0.0
#  100.0E2, 80.0E2
# *STEP
# *MATRIX GENERATE, STIFFNESS, MASS, LOAD
# *MATRIX OUTPUT, STIFFNESS, MASS, LOAD
# *DLOAD
#  1, P1, 0.0E3
#  1, P2, 0.0E3
# ** 1, PX, 54.0E3
#  1, PY, 72.0E3
# ** 1, PZ, 108.0E3
# *END STEP
# *STEP
# *STATIC
# *BOUNDARY
#  1, 1,6
# *DLOAD
#  1, P1, 0.0E3
#  1, P2, 0.0E3
# ** 1, PX, 54.0E3
#  1, PY, 72.0E3
# ** 1, PZ, 108.0E3
# *NODE PRINT
#  U, COORD
# *END STEP

L = 1.0
X = Dict(
    1 => [0.0, 0.0, 0.0],
    2 => [L, 0.0, 0.0])
beam = Element(Seg2, [1, 2])
E = 210.0e6
A = 20.0e-2
G = 84.0e6
Ix = J = 5.0e-5
I2 = Iy = 10.0e-5
I1 = Iz = 20.0e-5
update!(beam, "geometry", X)
update!(beam, "youngs modulus", E)
update!(beam, "shear modulus", G)
update!(beam, "cross-section area", A)
update!(beam, "torsional moment of inertia 1", I1)
update!(beam, "torsional moment of inertia 2", I2)
update!(beam, "polar moment of inertia", J)
update!(beam, "orientation", [1.0 0.0 0.0; 0.0 1.0 0.0; 0.0 0.0 1.0])
problem = Problem(Beam, "beam", 6)
add_elements!(problem, [beam])
assemble!(problem, 0.0)
K = Matrix(sparse(problem.assembly.K))
K_expected = [
    E*A/L 0 0 0 0 0 -E*A/L 0 0 0 0 0
    0 12*E*Iz/L^3 0 0 0 6*E*Iz/L^2 0 -12*E*Iz/L^3 0 0 0 6*E*Iz/L^2
    0 0 12*E*Iy/L^3 0 -6*E*Iy/L^2 0 0 0 -12*E*Iy/L^3 0 -6*E*Iy/L^2 0
    0 0 0 G*Ix/L 0 0 0 0 0 -G*Ix/L 0 0
    0 0 -6*E*Iy/L^2 0 4*E*Iy/L 0 0 0 6*E*Iy/L^2 0 2*E*Iy/L 0
    0 6*E*Iz/L^2 0 0 0 4*E*Iz/L 0 -6*E*Iz/L^2 0 0 0 2*E*Iz/L
    -E*A/L 0 0 0 0 0 E*A/L 0 0 0 0 0
    0 -12*E*Iz/L^3 0 0 0 -6*E*Iz/L^2 0 12*E*Iz/L^3 0 0 0 -6*E*Iz/L^2
    0 0 -12*E*Iy/L^3 0 6*E*Iy/L^2 0 0 0 12*E*Iy/L^3 0 6*E*Iy/L^2 0
    0 0 0 -G*Ix/L 0 0 0 0 0 G*J/L 0 0
    0 0 -6*E*Iy/L^2 0 2*E*Iy/L 0 0 0 6*E*Iy/L^2 0 4*E*Iy/L 0
    0 6*E*Iz/L^2 0 0 0 2*E*Iz/L 0 -6*E*Iz/L^2 0 0 0 4*E*Iz/L
    ]

if !isapprox(K, K_expected)
    K_diff = K-K_expected
    K_diff[abs.(K_diff) .< 1.0e-9] = 0
    println("K")
    display(K)
    println("K_expected")
    display(K_expected)
    println("difference")
    display(K_diff)
end

function solution(X2, n, q1, q2, qx, qy, qz; T=nothing)
    X = Dict(1 => [0.0, 0.0, 0.0], 2 => X2)
    beam = Element(Seg2, [1, 2])
    update!(beam, "geometry", X)
    update!(beam, "normal", n)
    update!(beam, "youngs modulus", 100.0e2)
    update!(beam, "shear modulus", 80.0e2)
    update!(beam, "cross-section area", 3.0e-2)
    update!(beam, "torsional moment of inertia 1", 1.0e-4)
    update!(beam, "torsional moment of inertia 2", 1.5e-4)
    update!(beam, "polar moment of inertia", 3.0e-5)
    update!(beam, "distributed load 1", q1)
    update!(beam, "distributed load 2", q2)
    update!(beam, "distributed load x", qx)
    update!(beam, "distributed load y", qy)
    update!(beam, "distributed load z", qz)
    if T != nothing
        update!(beam, "orientation", T)
    end
    time = 0.0
    X1, X2 = beam("geometry", time)
    L = norm(X2-X1)
    n1 = beam("normal", time)
    t = (X2-X1)/L
    n2 = cross(t,n1)
    #println("t = $t, n1  = $n1, n2 = $n2")
    problem = Problem(Beam, "example 1", 6)
    add_elements!(problem, [beam])
    assemble!(problem, time)
    K = Matrix(sparse(problem.assembly.K))
    f = Vector(sparse(problem.assembly.f)[:])
    u = zeros(12)
    fd = 7:12
    u[fd] = K[fd,fd]\f[fd]
    return K, u, f
end

include("read_abaqus.jl")

KA1, uA1, fA1 = solution([1.0, 0.0, 0.0], [0.0, 1.0, 0.0], 0.0, 0.0, 0.0, 72.0e3, 108.0e3)
KA1_expected = read_mtx_from_str("""
-1,1, -1,1,  3.333333333333318e+01
-1,2, -1,1, -8.333333333333497e+00
1,1, -1,1,  2.500000000000001e+01
2,1, -1,1, -2.500000000000001e+01
-1,2, -1,2,  3.333333333333317e+01
1,1, -1,2,  2.500000000000002e+01
2,1, -1,2, -2.500000000000002e+01
1,1, 1,1,  3.000000000000020e+02
2,1, 1,1, -3.000000000000020e+02
1,2, 1,2,  1.799999999999999e+01
1,6, 1,2,  9.000000000000000e+00
2,2, 1,2, -1.799999999999999e+01
2,6, 1,2,  8.999999999999996e+00
1,3, 1,3,  1.200000000000000e+01
1,5, 1,3, -5.999999999999999e+00
2,3, 1,3, -1.200000000000000e+01
2,5, 1,3, -5.999999999999998e+00
1,4, 1,4,  2.400000000000012e-01
2,4, 1,4, -2.400000000000012e-01
1,5, 1,5,  4.000000000000005e+00
2,3, 1,5,  5.999999999999999e+00
2,5, 1,5,  1.999999999999994e+00
1,6, 1,6,  6.000000000000007e+00
2,2, 1,6, -8.999999999999998e+00
2,6, 1,6,  2.999999999999991e+00
2,1, 2,1,  3.000000000000020e+02
2,2, 2,2,  1.799999999999999e+01
2,6, 2,2, -8.999999999999996e+00
2,3, 2,3,  1.200000000000000e+01
2,5, 2,3,  5.999999999999998e+00
2,4, 2,4,  2.400000000000012e-01
2,5, 2,5,  4.000000000000004e+00
2,6, 2,6,  6.000000000000007e+00""")
@test isapprox(KA1, KA1_expected)

KA2, uA2, fA2 = solution([1.0, 0.0, 0.0], [0.0, -1.0, 0.0], 0.0, 0.0, 0.0, 72.0e3, 108.0e3)
KA2_expected = read_mtx_from_str("""
-1,1, -1,1,  3.333333333333318e+01
-1,2, -1,1, -8.333333333333497e+00
1,1, -1,1,  2.500000000000001e+01
2,1, -1,1, -2.500000000000001e+01
-1,2, -1,2,  3.333333333333317e+01
1,1, -1,2,  2.500000000000002e+01
2,1, -1,2, -2.500000000000002e+01
1,1, 1,1,  3.000000000000020e+02
2,1, 1,1, -3.000000000000020e+02
1,2, 1,2,  1.799999999999999e+01
1,6, 1,2,  9.000000000000000e+00
2,2, 1,2, -1.799999999999999e+01
2,6, 1,2,  8.999999999999996e+00
1,3, 1,3,  1.200000000000000e+01
1,5, 1,3, -5.999999999999999e+00
2,3, 1,3, -1.200000000000000e+01
2,5, 1,3, -5.999999999999998e+00
1,4, 1,4,  2.400000000000012e-01
2,4, 1,4, -2.400000000000012e-01
1,5, 1,5,  4.000000000000005e+00
2,3, 1,5,  5.999999999999999e+00
2,5, 1,5,  1.999999999999994e+00
1,6, 1,6,  6.000000000000007e+00
2,2, 1,6, -8.999999999999998e+00
2,6, 1,6,  2.999999999999991e+00
2,1, 2,1,  3.000000000000020e+02
2,2, 2,2,  1.799999999999999e+01
2,6, 2,2, -8.999999999999996e+00
2,3, 2,3,  1.200000000000000e+01
2,5, 2,3,  5.999999999999998e+00
2,4, 2,4,  2.400000000000012e-01
2,5, 2,5,  4.000000000000004e+00
2,6, 2,6,  6.000000000000007e+00
""")
@test isapprox(KA2, KA2_expected)

KA3, uA3, fA3 = solution([1.0, 0.0, 0.0], [0.0, 0.0, 1.0], 0.0, 0.0, 0.0, 72.0e3, 108.0e3)
KA3_expected = read_mtx_from_str("""
-1,1, -1,1,  3.333333333333318e+01
-1,2, -1,1, -8.333333333333497e+00
1,1, -1,1,  2.500000000000001e+01
2,1, -1,1, -2.500000000000001e+01
-1,2, -1,2,  3.333333333333317e+01
1,1, -1,2,  2.500000000000002e+01
2,1, -1,2, -2.500000000000002e+01
1,1, 1,1,  3.000000000000020e+02
2,1, 1,1, -3.000000000000020e+02
1,2, 1,2,  1.200000000000000e+01
1,6, 1,2,  5.999999999999999e+00
2,2, 1,2, -1.200000000000000e+01
2,6, 1,2,  5.999999999999998e+00
1,3, 1,3,  1.799999999999999e+01
1,5, 1,3, -9.000000000000000e+00
2,3, 1,3, -1.799999999999999e+01
2,5, 1,3, -8.999999999999996e+00
1,4, 1,4,  2.400000000000012e-01
2,4, 1,4, -2.400000000000012e-01
1,5, 1,5,  6.000000000000007e+00
2,3, 1,5,  8.999999999999998e+00
2,5, 1,5,  2.999999999999991e+00
1,6, 1,6,  4.000000000000005e+00
2,2, 1,6, -5.999999999999999e+00
2,6, 1,6,  1.999999999999994e+00
2,1, 2,1,  3.000000000000020e+02
2,2, 2,2,  1.200000000000000e+01
2,6, 2,2, -5.999999999999998e+00
2,3, 2,3,  1.799999999999999e+01
2,5, 2,3,  8.999999999999996e+00
2,4, 2,4,  2.400000000000012e-01
2,5, 2,5,  6.000000000000007e+00
2,6, 2,6,  4.000000000000004e+00
""")
@test isapprox(KA3, KA3_expected)

KA4, uA4, fA4 = solution([1.0, 0.0, 0.0], [0.0, 0.0, -1.0], 0.0, 0.0, 0.0, 72.0e3, 108.0e3)
KA4_expected = read_mtx_from_str("""
-1,1, -1,1,  3.333333333333318e+01
-1,2, -1,1, -8.333333333333497e+00
1,1, -1,1,  2.500000000000001e+01
2,1, -1,1, -2.500000000000001e+01
-1,2, -1,2,  3.333333333333317e+01
1,1, -1,2,  2.500000000000002e+01
2,1, -1,2, -2.500000000000002e+01
1,1, 1,1,  3.000000000000020e+02
2,1, 1,1, -3.000000000000020e+02
1,2, 1,2,  1.200000000000000e+01
1,6, 1,2,  5.999999999999999e+00
2,2, 1,2, -1.200000000000000e+01
2,6, 1,2,  5.999999999999998e+00
1,3, 1,3,  1.799999999999999e+01
1,5, 1,3, -9.000000000000000e+00
2,3, 1,3, -1.799999999999999e+01
2,5, 1,3, -8.999999999999996e+00
1,4, 1,4,  2.400000000000012e-01
2,4, 1,4, -2.400000000000012e-01
1,5, 1,5,  6.000000000000007e+00
2,3, 1,5,  8.999999999999998e+00
2,5, 1,5,  2.999999999999991e+00
1,6, 1,6,  4.000000000000005e+00
2,2, 1,6, -5.999999999999999e+00
2,6, 1,6,  1.999999999999994e+00
2,1, 2,1,  3.000000000000020e+02
2,2, 2,2,  1.200000000000000e+01
2,6, 2,2, -5.999999999999998e+00
2,3, 2,3,  1.799999999999999e+01
2,5, 2,3,  8.999999999999996e+00
2,4, 2,4,  2.400000000000012e-01
2,5, 2,5,  6.000000000000007e+00
2,6, 2,6,  4.000000000000004e+00
""")
@test isapprox(KA4, KA4_expected)

KB1, uB1, fB1 = solution([0.0, 1.0, 0.0], [1.0, 0.0, 0.0], 0.0, 0.0, 0.0, 72.0e3, 108.0e3)
KB1_expected = read_mtx_from_str("""
-1,1, -1,1,  3.333333333333318e+01
-1,2, -1,1, -8.333333333333497e+00
1,2, -1,1,  2.500000000000001e+01
2,2, -1,1, -2.500000000000001e+01
-1,2, -1,2,  3.333333333333317e+01
1,2, -1,2,  2.500000000000002e+01
2,2, -1,2, -2.500000000000002e+01
1,1, 1,1,  1.799999999999999e+01
1,6, 1,1, -9.000000000000000e+00
2,1, 1,1, -1.799999999999999e+01
2,6, 1,1, -8.999999999999996e+00
1,2, 1,2,  3.000000000000020e+02
2,2, 1,2, -3.000000000000020e+02
1,3, 1,3,  1.200000000000000e+01
1,4, 1,3,  5.999999999999999e+00
2,3, 1,3, -1.200000000000000e+01
2,4, 1,3,  5.999999999999998e+00
1,4, 1,4,  4.000000000000005e+00
2,3, 1,4, -5.999999999999999e+00
2,4, 1,4,  1.999999999999994e+00
1,5, 1,5,  2.400000000000012e-01
2,5, 1,5, -2.400000000000012e-01
1,6, 1,6,  6.000000000000007e+00
2,1, 1,6,  8.999999999999998e+00
2,6, 1,6,  2.999999999999991e+00
2,1, 2,1,  1.799999999999999e+01
2,6, 2,1,  8.999999999999996e+00
2,2, 2,2,  3.000000000000020e+02
2,3, 2,3,  1.200000000000000e+01
2,4, 2,3, -5.999999999999998e+00
2,4, 2,4,  4.000000000000004e+00
2,5, 2,5,  2.400000000000012e-01
2,6, 2,6,  6.000000000000007e+00
""")
@test isapprox(KB1, KB1_expected)

KB2, uB2, fB2 = solution([0.0, 1.0, 0.0], [-1.0, 0.0, 0.0], 0.0, 0.0, 0.0, 72.0e3, 108.0e3)
KB2_expected = read_mtx_from_str("""
-1,1, -1,1,  3.333333333333318e+01
-1,2, -1,1, -8.333333333333497e+00
1,2, -1,1,  2.500000000000001e+01
2,2, -1,1, -2.500000000000001e+01
-1,2, -1,2,  3.333333333333317e+01
1,2, -1,2,  2.500000000000002e+01
2,2, -1,2, -2.500000000000002e+01
1,1, 1,1,  1.799999999999999e+01
1,6, 1,1, -9.000000000000000e+00
2,1, 1,1, -1.799999999999999e+01
2,6, 1,1, -8.999999999999996e+00
1,2, 1,2,  3.000000000000020e+02
2,2, 1,2, -3.000000000000020e+02
1,3, 1,3,  1.200000000000000e+01
1,4, 1,3,  5.999999999999999e+00
2,3, 1,3, -1.200000000000000e+01
2,4, 1,3,  5.999999999999998e+00
1,4, 1,4,  4.000000000000005e+00
2,3, 1,4, -5.999999999999999e+00
2,4, 1,4,  1.999999999999994e+00
1,5, 1,5,  2.400000000000012e-01
2,5, 1,5, -2.400000000000012e-01
1,6, 1,6,  6.000000000000007e+00
2,1, 1,6,  8.999999999999998e+00
2,6, 1,6,  2.999999999999991e+00
2,1, 2,1,  1.799999999999999e+01
2,6, 2,1,  8.999999999999996e+00
2,2, 2,2,  3.000000000000020e+02
2,3, 2,3,  1.200000000000000e+01
2,4, 2,3, -5.999999999999998e+00
2,4, 2,4,  4.000000000000004e+00
2,5, 2,5,  2.400000000000012e-01
2,6, 2,6,  6.000000000000007e+00
""")
@test isapprox(KB2, KB2_expected)

KB3, uB3, fB3 = solution([0.0, 1.0, 0.0], [0.0, 0.0, 1.0], 0.0, 0.0, 0.0, 72.0e3, 108.0e3)
KB3_expected = read_mtx_from_str("""
-1,1, -1,1,  3.333333333333318e+01
-1,2, -1,1, -8.333333333333497e+00
1,2, -1,1,  2.500000000000001e+01
2,2, -1,1, -2.500000000000001e+01
-1,2, -1,2,  3.333333333333317e+01
1,2, -1,2,  2.500000000000002e+01
2,2, -1,2, -2.500000000000002e+01
1,1, 1,1,  1.200000000000000e+01
1,6, 1,1, -5.999999999999999e+00
2,1, 1,1, -1.200000000000000e+01
2,6, 1,1, -5.999999999999998e+00
1,2, 1,2,  3.000000000000020e+02
2,2, 1,2, -3.000000000000020e+02
1,3, 1,3,  1.799999999999999e+01
1,4, 1,3,  9.000000000000000e+00
2,3, 1,3, -1.799999999999999e+01
2,4, 1,3,  8.999999999999996e+00
1,4, 1,4,  6.000000000000007e+00
2,3, 1,4, -8.999999999999998e+00
2,4, 1,4,  2.999999999999991e+00
1,5, 1,5,  2.400000000000012e-01
2,5, 1,5, -2.400000000000012e-01
1,6, 1,6,  4.000000000000005e+00
2,1, 1,6,  5.999999999999999e+00
2,6, 1,6,  1.999999999999994e+00
2,1, 2,1,  1.200000000000000e+01
2,6, 2,1,  5.999999999999998e+00
2,2, 2,2,  3.000000000000020e+02
2,3, 2,3,  1.799999999999999e+01
2,4, 2,3, -8.999999999999996e+00
2,4, 2,4,  6.000000000000007e+00
2,5, 2,5,  2.400000000000012e-01
2,6, 2,6,  4.000000000000004e+00
""")
@test isapprox(KB3, KB3_expected)

KB4, uB4, fB4 = solution([0.0, 1.0, 0.0], [0.0, 0.0, -1.0], 0.0, 0.0, 0.0, 72.0e3, 108.0e3)
KB4_expected = read_mtx_from_str("""
-1,1, -1,1,  3.333333333333318e+01
-1,2, -1,1, -8.333333333333497e+00
1,2, -1,1,  2.500000000000001e+01
2,2, -1,1, -2.500000000000001e+01
-1,2, -1,2,  3.333333333333317e+01
1,2, -1,2,  2.500000000000002e+01
2,2, -1,2, -2.500000000000002e+01
1,1, 1,1,  1.200000000000000e+01
1,6, 1,1, -5.999999999999999e+00
2,1, 1,1, -1.200000000000000e+01
2,6, 1,1, -5.999999999999998e+00
1,2, 1,2,  3.000000000000020e+02
2,2, 1,2, -3.000000000000020e+02
1,3, 1,3,  1.799999999999999e+01
1,4, 1,3,  9.000000000000000e+00
2,3, 1,3, -1.799999999999999e+01
2,4, 1,3,  8.999999999999996e+00
1,4, 1,4,  6.000000000000007e+00
2,3, 1,4, -8.999999999999998e+00
2,4, 1,4,  2.999999999999991e+00
1,5, 1,5,  2.400000000000012e-01
2,5, 1,5, -2.400000000000012e-01
1,6, 1,6,  4.000000000000005e+00
2,1, 1,6,  5.999999999999999e+00
2,6, 1,6,  1.999999999999994e+00
2,1, 2,1,  1.200000000000000e+01
2,6, 2,1,  5.999999999999998e+00
2,2, 2,2,  3.000000000000020e+02
2,3, 2,3,  1.799999999999999e+01
2,4, 2,3, -8.999999999999996e+00
2,4, 2,4,  6.000000000000007e+00
2,5, 2,5,  2.400000000000012e-01
2,6, 2,6,  4.000000000000004e+00
""")
@test isapprox(KB4, KB4_expected)

KC1, uC1, fC1 = solution([0.0, 0.0, 1.0], [1.0, 0.0, 0.0], 0.0, 0.0, 0.0, 72.0e3, 108.0e3)
KC1_expected = read_mtx_from_str("""
-1,1, -1,1,  3.333333333333318e+01
-1,2, -1,1, -8.333333333333497e+00
1,3, -1,1,  2.500000000000001e+01
2,3, -1,1, -2.500000000000001e+01
-1,2, -1,2,  3.333333333333317e+01
1,3, -1,2,  2.500000000000002e+01
2,3, -1,2, -2.500000000000002e+01
1,1, 1,1,  1.799999999999999e+01
1,5, 1,1,  9.000000000000000e+00
2,1, 1,1, -1.799999999999999e+01
2,5, 1,1,  8.999999999999996e+00
1,2, 1,2,  1.200000000000000e+01
1,4, 1,2, -5.999999999999999e+00
2,2, 1,2, -1.200000000000000e+01
2,4, 1,2, -5.999999999999998e+00
1,3, 1,3,  3.000000000000020e+02
2,3, 1,3, -3.000000000000020e+02
1,4, 1,4,  4.000000000000005e+00
2,2, 1,4,  5.999999999999999e+00
2,4, 1,4,  1.999999999999994e+00
1,5, 1,5,  6.000000000000007e+00
2,1, 1,5, -8.999999999999998e+00
2,5, 1,5,  2.999999999999991e+00
1,6, 1,6,  2.400000000000012e-01
2,6, 1,6, -2.400000000000012e-01
2,1, 2,1,  1.799999999999999e+01
2,5, 2,1, -8.999999999999996e+00
2,2, 2,2,  1.200000000000000e+01
2,4, 2,2,  5.999999999999998e+00
2,3, 2,3,  3.000000000000020e+02
2,4, 2,4,  4.000000000000004e+00
2,5, 2,5,  6.000000000000007e+00
2,6, 2,6,  2.400000000000012e-01
""")
@test isapprox(KC1, KC1_expected)

KC2, uC2, fC2 = solution([0.0, 0.0, 1.0], [-1.0, 0.0, 0.0], 0.0, 0.0, 0.0, 72.0e3, 108.0e3)
KC2_expected = read_mtx_from_str("""
-1,1, -1,1,  3.333333333333318e+01
-1,2, -1,1, -8.333333333333497e+00
1,3, -1,1,  2.500000000000001e+01
2,3, -1,1, -2.500000000000001e+01
-1,2, -1,2,  3.333333333333317e+01
1,3, -1,2,  2.500000000000002e+01
2,3, -1,2, -2.500000000000002e+01
1,1, 1,1,  1.799999999999999e+01
1,5, 1,1,  9.000000000000000e+00
2,1, 1,1, -1.799999999999999e+01
2,5, 1,1,  8.999999999999996e+00
1,2, 1,2,  1.200000000000000e+01
1,4, 1,2, -5.999999999999999e+00
2,2, 1,2, -1.200000000000000e+01
2,4, 1,2, -5.999999999999998e+00
1,3, 1,3,  3.000000000000020e+02
2,3, 1,3, -3.000000000000020e+02
1,4, 1,4,  4.000000000000005e+00
2,2, 1,4,  5.999999999999999e+00
2,4, 1,4,  1.999999999999994e+00
1,5, 1,5,  6.000000000000007e+00
2,1, 1,5, -8.999999999999998e+00
2,5, 1,5,  2.999999999999991e+00
1,6, 1,6,  2.400000000000012e-01
2,6, 1,6, -2.400000000000012e-01
2,1, 2,1,  1.799999999999999e+01
2,5, 2,1, -8.999999999999996e+00
2,2, 2,2,  1.200000000000000e+01
2,4, 2,2,  5.999999999999998e+00
2,3, 2,3,  3.000000000000020e+02
2,4, 2,4,  4.000000000000004e+00
2,5, 2,5,  6.000000000000007e+00
2,6, 2,6,  2.400000000000012e-01
""")
@test isapprox(KC2, KC2_expected)

KC3, uC3, fC3 = solution([0.0, 0.0, 1.0], [0.0, 1.0, 0.0], 0.0, 0.0, 0.0, 72.0e3, 108.0e3)
KC3_expected = read_mtx_from_str("""
-1,1, -1,1,  3.333333333333318e+01
-1,2, -1,1, -8.333333333333497e+00
1,3, -1,1,  2.500000000000001e+01
2,3, -1,1, -2.500000000000001e+01
-1,2, -1,2,  3.333333333333317e+01
1,3, -1,2,  2.500000000000002e+01
2,3, -1,2, -2.500000000000002e+01
1,1, 1,1,  1.200000000000000e+01
1,5, 1,1,  5.999999999999999e+00
2,1, 1,1, -1.200000000000000e+01
2,5, 1,1,  5.999999999999998e+00
1,2, 1,2,  1.799999999999999e+01
1,4, 1,2, -9.000000000000000e+00
2,2, 1,2, -1.799999999999999e+01
2,4, 1,2, -8.999999999999996e+00
1,3, 1,3,  3.000000000000020e+02
2,3, 1,3, -3.000000000000020e+02
1,4, 1,4,  6.000000000000007e+00
2,2, 1,4,  8.999999999999998e+00
2,4, 1,4,  2.999999999999991e+00
1,5, 1,5,  4.000000000000005e+00
2,1, 1,5, -5.999999999999999e+00
2,5, 1,5,  1.999999999999994e+00
1,6, 1,6,  2.400000000000012e-01
2,6, 1,6, -2.400000000000012e-01
2,1, 2,1,  1.200000000000000e+01
2,5, 2,1, -5.999999999999998e+00
2,2, 2,2,  1.799999999999999e+01
2,4, 2,2,  8.999999999999996e+00
2,3, 2,3,  3.000000000000020e+02
2,4, 2,4,  6.000000000000007e+00
2,5, 2,5,  4.000000000000004e+00
2,6, 2,6,  2.400000000000012e-01
""")
@test isapprox(KC3, KC3_expected)

KC4, uC4, fC4 = solution([0.0, 0.0, 1.0], [0.0, -1.0, 0.0], 0.0, 0.0, 0.0, 72.0e3, 108.0e3)
KC4_expected = read_mtx_from_str("""
-1,1, -1,1,  3.333333333333318e+01
-1,2, -1,1, -8.333333333333497e+00
1,3, -1,1,  2.500000000000001e+01
2,3, -1,1, -2.500000000000001e+01
-1,2, -1,2,  3.333333333333317e+01
1,3, -1,2,  2.500000000000002e+01
2,3, -1,2, -2.500000000000002e+01
1,1, 1,1,  1.200000000000000e+01
1,5, 1,1,  5.999999999999999e+00
2,1, 1,1, -1.200000000000000e+01
2,5, 1,1,  5.999999999999998e+00
1,2, 1,2,  1.799999999999999e+01
1,4, 1,2, -9.000000000000000e+00
2,2, 1,2, -1.799999999999999e+01
2,4, 1,2, -8.999999999999996e+00
1,3, 1,3,  3.000000000000020e+02
2,3, 1,3, -3.000000000000020e+02
1,4, 1,4,  6.000000000000007e+00
2,2, 1,4,  8.999999999999998e+00
2,4, 1,4,  2.999999999999991e+00
1,5, 1,5,  4.000000000000005e+00
2,1, 1,5, -5.999999999999999e+00
2,5, 1,5,  1.999999999999994e+00
1,6, 1,6,  2.400000000000012e-01
2,6, 1,6, -2.400000000000012e-01
2,1, 2,1,  1.200000000000000e+01
2,5, 2,1, -5.999999999999998e+00
2,2, 2,2,  1.799999999999999e+01
2,4, 2,2,  8.999999999999996e+00
2,3, 2,3,  3.000000000000020e+02
2,4, 2,4,  6.000000000000007e+00
2,5, 2,5,  4.000000000000004e+00
2,6, 2,6,  2.400000000000012e-01
""")
@test isapprox(KC4, KC4_expected)
